import json
import os
from datetime import datetime
from fpdf import FPDF
import base64
import streamlit as st

class ExportService:
    """Service for exporting and sharing itineraries"""
    
    def __init__(self):
        self.export_dir = "exports"
        os.makedirs(self.export_dir, exist_ok=True)
    
    def _clean_text_for_pdf(self, text):
        """Clean text for PDF export by replacing unsupported characters"""
        if not text:
            return ""
        # Replace currency symbols and other Unicode characters
        replacements = {
            '‚Çπ': 'Rs.',
            '‚ú®': '*',
            'üì∫': '[Video]',
            'üè®': '[Hotel]',
            'üí°': 'Tip:',
            '‚úÖ': '[Verified]'
        }
        
        cleaned_text = str(text)
        for old, new in replacements.items():
            cleaned_text = cleaned_text.replace(old, new)
        
        # Remove any remaining non-ASCII characters
        cleaned_text = cleaned_text.encode('ascii', 'ignore').decode('ascii')
        return cleaned_text
    
    def export_to_pdf(self, itinerary):
        """Export itinerary to PDF format"""
        try:
            pdf = FPDF()
            pdf.add_page()
            
            # Add Unicode font support
            try:
                pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
                pdf.set_font('DejaVu', size=16)
            except:
                # Fallback to Arial and replace currency symbols
                pdf.set_font("Arial", size=16)
            
            # Title
            title = self._clean_text_for_pdf(f"Travel Itinerary - {itinerary['destination']}")
            pdf.cell(0, 10, title, ln=True, align='C')
            pdf.ln(5)
            
            # Basic info
            pdf.set_font("Arial", size=12)
            pdf.cell(0, 8, f"Duration: {itinerary['duration']} days", ln=True)
            budget_text = self._clean_text_for_pdf(f"Budget: Rs.{itinerary['budget']}")
            pdf.cell(0, 8, budget_text, ln=True)
            if itinerary.get('budget_type'):
                type_text = self._clean_text_for_pdf(f"Type: {itinerary['budget_type']}")
                pdf.cell(0, 8, type_text, ln=True)
            pdf.ln(5)
            
            # Daily plans
            for day_plan in itinerary['daily_plans']:
                pdf.set_font("Arial", "B", 14)
                pdf.cell(0, 10, f"Day {day_plan['day']}", ln=True)
                pdf.set_font("Arial", size=10)
                
                for activity in day_plan['activities']:
                    # Activity header
                    pdf.set_font("Arial", "B", 11)
                    activity_header = self._clean_text_for_pdf(f"{activity.get('time', 'TBD')}: {activity.get('activity', 'Activity')}")
                    pdf.cell(0, 6, activity_header, ln=True)
                    
                    # Activity details
                    pdf.set_font("Arial", size=10)
                    if activity.get('place'):
                        location_text = self._clean_text_for_pdf(f"Location: {activity['place']}")
                        pdf.cell(0, 5, location_text, ln=True)
                    
                    duration = activity.get('duration', 'TBD')
                    cost = activity.get('cost', 0)
                    detail_text = self._clean_text_for_pdf(f"Duration: {duration} | Cost: Rs.{cost}")
                    pdf.cell(0, 5, detail_text, ln=True)
                    
                    if activity.get('details'):
                        # Wrap long text
                        details = activity['details'][:200] + "..." if len(activity['details']) > 200 else activity['details']
                        pdf.multi_cell(0, 5, f"Details: {details}")
                    
                    # Special indicators
                    if activity.get('influencer_recommended'):
                        pdf.set_font("Arial", "I", 9)
                        pdf.cell(0, 4, "‚ú® Recommended by local influencer", ln=True)
                    if activity.get('youtube_recommended'):
                        pdf.set_font("Arial", "I", 9)
                        pdf.cell(0, 4, "üì∫ Featured in travel vlogs", ln=True)
                    if activity.get('hotel_recommendation'):
                        pdf.set_font("Arial", "I", 9)
                        pdf.cell(0, 4, "üè® Accommodation", ln=True)
                    
                    pdf.ln(3)
                
                pdf.ln(5)
            
            # Footer
            pdf.ln(10)
            pdf.set_font("Arial", "I", 8)
            pdf.cell(0, 5, f"Generated by AI Travel Planner on {datetime.now().strftime('%Y-%m-%d %H:%M')}", ln=True, align='C')
            
            # Save PDF
            filename = f"itinerary_{itinerary['destination'].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
            filepath = os.path.join(self.export_dir, filename)
            pdf.output(filepath)
            
            return filepath
            
        except Exception as e:
            print(f"Error exporting to PDF: {str(e)}")
            return None
    
    def export_to_json(self, itinerary):
        """Export itinerary to JSON format"""
        try:
            filename = f"itinerary_{itinerary['destination'].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
            filepath = os.path.join(self.export_dir, filename)
            
            # Add export metadata
            export_data = {
                **itinerary,
                'export_metadata': {
                    'exported_at': datetime.now().isoformat(),
                    'exported_by': 'AI Travel Planner',
                    'version': '1.0'
                }
            }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            return filepath
            
        except Exception as e:
            print(f"Error exporting to JSON: {str(e)}")
            return None
    
    def create_shareable_link(self, itinerary):
        """Create a shareable link/code for the itinerary"""
        try:
            # Create a compressed representation of the itinerary
            share_data = {
                'destination': itinerary['destination'],
                'duration': itinerary['duration'],
                'budget': itinerary['budget'],
                'budget_type': itinerary.get('budget_type', 'Standard'),
                'daily_plans': [
                    {
                        'day': day['day'],
                        'activities': [
                            {
                                'time': act['time'],
                                'activity': act['activity'],
                                'cost': act.get('cost', 0),
                                'place': act.get('place', ''),
                                'details': act.get('details', '')[:100]  # Truncate for sharing
                            }
                            for act in day['activities']
                        ]
                    }
                    for day in itinerary['daily_plans']
                ]
            }
            
            # Convert to base64 for sharing
            json_str = json.dumps(share_data, separators=(',', ':'))
            encoded = base64.b64encode(json_str.encode('utf-8')).decode('utf-8')
            
            # Create share code (first 8 characters for readability)
            share_code = encoded[:12].upper()
            
            # In a real app, you'd store this in a database
            # For now, we'll create a local file
            share_filename = f"share_{share_code}.json"
            share_filepath = os.path.join(self.export_dir, share_filename)
            
            with open(share_filepath, 'w') as f:
                json.dump(share_data, f, indent=2)
            
            return {
                'share_code': share_code,
                'share_url': f"https://travel-planner.app/shared/{share_code}",  # Mock URL
                'qr_data': encoded[:50]  # For QR code generation
            }
            
        except Exception as e:
            print(f"Error creating shareable link: {str(e)}")
            return None
    
    def load_shared_itinerary(self, share_code):
        """Load itinerary from share code"""
        try:
            share_filename = f"share_{share_code}.json"
            share_filepath = os.path.join(self.export_dir, share_filename)
            
            if os.path.exists(share_filepath):
                with open(share_filepath, 'r') as f:
                    return json.load(f)
            else:
                return None
                
        except Exception as e:
            print(f"Error loading shared itinerary: {str(e)}")
            return None
    
    def get_download_link(self, filepath):
        """Create download link for Streamlit"""
        try:
            with open(filepath, "rb") as f:
                data = f.read()
            
            filename = os.path.basename(filepath)
            b64 = base64.b64encode(data).decode()
            
            if filepath.endswith('.pdf'):
                mime_type = 'application/pdf'
            elif filepath.endswith('.json'):
                mime_type = 'application/json'
            else:
                mime_type = 'application/octet-stream'
            
            href = f'<a href="data:{mime_type};base64,{b64}" download="{filename}">Download {filename}</a>'
            return href
            
        except Exception as e:
            print(f"Error creating download link: {str(e)}")
            return None
